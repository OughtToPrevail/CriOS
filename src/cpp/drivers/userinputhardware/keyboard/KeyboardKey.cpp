#include "KeyboardKey.h"

KeyboardKey::KeyboardKey(const KeyCode& key)
		: _primary(key), _secondary(KeyCode::NO_KEY), _conditionForSecondary(KeyboardCondition::NO_CONDITION)
{

}

KeyboardKey::KeyboardKey(const KeyCode& primary, const KeyCode& secondary, unsigned char conditionForSecondary) : _primary(primary),
																									_secondary(secondary),
																									_conditionForSecondary(
																											conditionForSecondary)
{

}

const KeyCode& KeyboardKey::getPrimaryKey() const
{
	return this->_primary;
}

const KeyCode& KeyboardKey::getSecondaryKey() const
{
	return this->_secondary;
}

const KeyCode& KeyboardKey::applyCondition(KeyboardState state) const
{
	if(state.shiftActive && this->_conditionForSecondary & KeyboardCondition::SHIFT)
	{
		return this->_secondary;
	}
	if(state.capsLockActive && this->_conditionForSecondary & KeyboardCondition::CAPS_LOCK)
	{
		return this->_secondary;
	}
	if(state.numLockActive && this->_conditionForSecondary & KeyboardCondition::NUM_LOCK)
	{
		return this->_secondary;
	}
	return this->_primary;
}

const KeyboardKey& KeyboardKey::fromScanCode(unsigned char scanCode)
{
	return KeyboardKey::_keyboardLayout[scanCode - 1];  // first value is error code
}

#define ASSIGN_KEYBOARD_KEY(PRIMARY) KeyboardKey KeyboardKey::PRIMARY(KeyCode::PRIMARY);
#define ASSIGN_KEYBOARD_SHIFT(PRIMARY, SECONDARY) KeyboardKey KeyboardKey::PRIMARY(KeyCode::PRIMARY, KeyCode::SECONDARY, KeyboardCondition::SHIFT);
#define ASSIGN_KEYBOARD_LETTER(UPPERCASE, LOWERCASE) KeyboardKey KeyboardKey::UPPERCASE(KeyCode::LOWERCASE, KeyCode::UPPERCASE, (KeyboardCondition::SHIFT | KeyboardCondition::CAPS_LOCK));
#define ASSIGN_KEYBOARD_KEYPAD(PRIMARY_KEYPAD_KEY, OTHER_KEY) KeyboardKey KeyboardKey::PRIMARY_KEYPAD_KEY(KeyCode::OTHER_KEY, KeyCode::PRIMARY_KEYPAD_KEY, KeyboardCondition::NUM_LOCK);

ASSIGN_KEYBOARD_KEY(ESCAPE)
ASSIGN_KEYBOARD_SHIFT(ONE, EXCLAMATION_MARK)
ASSIGN_KEYBOARD_SHIFT(TWO, AT)
ASSIGN_KEYBOARD_SHIFT(THREE, HASHTAG)
ASSIGN_KEYBOARD_SHIFT(FOUR, DOLLAR_SIGN)
ASSIGN_KEYBOARD_SHIFT(FIVE, PERCENT_SIGN)
ASSIGN_KEYBOARD_SHIFT(SIX, CARET)
ASSIGN_KEYBOARD_SHIFT(SEVEN, AMPERSAND)
ASSIGN_KEYBOARD_SHIFT(EIGHT, ASTERISK)
ASSIGN_KEYBOARD_SHIFT(NINE, OPEN_BRACKET)
ASSIGN_KEYBOARD_SHIFT(ZERO, CLOSE_BRACKET)
ASSIGN_KEYBOARD_SHIFT(MINUS, UNDERSCORE)
ASSIGN_KEYBOARD_SHIFT(EQUAL_SIGN, PLUS)
ASSIGN_KEYBOARD_KEY(BACKSPACE)
ASSIGN_KEYBOARD_KEY(TAB)
ASSIGN_KEYBOARD_LETTER(Q, q)
ASSIGN_KEYBOARD_LETTER(W, w)
ASSIGN_KEYBOARD_LETTER(E, e)
ASSIGN_KEYBOARD_LETTER(R, r)
ASSIGN_KEYBOARD_LETTER(T, t)
ASSIGN_KEYBOARD_LETTER(Y, y)
ASSIGN_KEYBOARD_LETTER(U, u)
ASSIGN_KEYBOARD_LETTER(I, i)
ASSIGN_KEYBOARD_LETTER(O, o)
ASSIGN_KEYBOARD_LETTER(P, p)
ASSIGN_KEYBOARD_SHIFT(OPEN_SQUARE_BRACKET, OPEN_CURLEY_BRACKET)
ASSIGN_KEYBOARD_SHIFT(CLOSE_SQUARE_BRACKET, CLOSE_CURLEY_BRACKET)
ASSIGN_KEYBOARD_KEY(ENTER)
ASSIGN_KEYBOARD_KEY(LEFT_CONTROL)
ASSIGN_KEYBOARD_LETTER(A, a)
ASSIGN_KEYBOARD_LETTER(S, s)
ASSIGN_KEYBOARD_LETTER(D, d)
ASSIGN_KEYBOARD_LETTER(F, f)
ASSIGN_KEYBOARD_LETTER(G, g)
ASSIGN_KEYBOARD_LETTER(H, h)
ASSIGN_KEYBOARD_LETTER(J, j)
ASSIGN_KEYBOARD_LETTER(K, k)
ASSIGN_KEYBOARD_LETTER(L, l)
ASSIGN_KEYBOARD_SHIFT(SEMICOLON, COLON)
ASSIGN_KEYBOARD_SHIFT(QUOTE, QUOTATION_MARKS)
ASSIGN_KEYBOARD_SHIFT(GRAVE_ACCENT, TILDE)
ASSIGN_KEYBOARD_KEY(LEFT_SHIFT)
ASSIGN_KEYBOARD_SHIFT(BACKSLASH, VERTICAL_BAR)
ASSIGN_KEYBOARD_LETTER(Z, z)
ASSIGN_KEYBOARD_LETTER(X, x)
ASSIGN_KEYBOARD_LETTER(C, c)
ASSIGN_KEYBOARD_LETTER(V, v)
ASSIGN_KEYBOARD_LETTER(B, b)
ASSIGN_KEYBOARD_LETTER(N, n)
ASSIGN_KEYBOARD_LETTER(M, m)
ASSIGN_KEYBOARD_SHIFT(COMMA, LESS_THAN)
ASSIGN_KEYBOARD_SHIFT(DOT, GREATER_THAN)
ASSIGN_KEYBOARD_SHIFT(SLASH, QUESTION_MARK)
ASSIGN_KEYBOARD_KEY(RIGHT_SHIFT)
ASSIGN_KEYBOARD_KEY(KEYPAD)
ASSIGN_KEYBOARD_KEY(LEFT_ALT)
ASSIGN_KEYBOARD_KEY(SPACE_BAR)
ASSIGN_KEYBOARD_KEY(CAPS_LOCK)
ASSIGN_KEYBOARD_KEY(F1)
ASSIGN_KEYBOARD_KEY(F2)
ASSIGN_KEYBOARD_KEY(F3)
ASSIGN_KEYBOARD_KEY(F4)
ASSIGN_KEYBOARD_KEY(F5)
ASSIGN_KEYBOARD_KEY(F6)
ASSIGN_KEYBOARD_KEY(F7)
ASSIGN_KEYBOARD_KEY(F8)
ASSIGN_KEYBOARD_KEY(F9)
ASSIGN_KEYBOARD_KEY(F10)
ASSIGN_KEYBOARD_KEY(NUM_LOCK)
ASSIGN_KEYBOARD_KEY(SCROLL_LOCK)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_7, HOME)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_8, UP)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_9, PAGE_UP)
ASSIGN_KEYBOARD_KEY(KEYPAD_MINUS)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_4, LEFT)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_5, NO_KEY)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_6, RIGHT)
ASSIGN_KEYBOARD_KEY(KEYPAD_PLUS)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_1, END)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_2, DOWN)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_3, PAGE_DOWN)
ASSIGN_KEYBOARD_KEYPAD(KEYPAD_0, INSERT)
ASSIGN_KEYBOARD_KEY(DEL)

ASSIGN_KEYBOARD_KEY(NO_KEY)

KeyboardKey KeyboardKey::_keyboardLayout[KEYBOARD_KEYS_COUNT] = {
		ESCAPE,
		ONE,
		TWO,
		THREE,
		FOUR,
		FIVE,
		SIX,
		SEVEN,
		EIGHT,
		NINE,
		ZERO,
		MINUS,
		EQUAL_SIGN,
		BACKSPACE,
		TAB,
		Q,
		W,
		E,
		R,
		T,
		Y,
		U,
		I,
		O,
		P,
		OPEN_SQUARE_BRACKET,
		CLOSE_SQUARE_BRACKET,
		ENTER,
		LEFT_CONTROL,
		A,
		S,
		D,
		F,
		G,
		H,
		J,
		K,
		L,
		SEMICOLON,
		QUOTE,
		GRAVE_ACCENT,
		LEFT_SHIFT,
		BACKSLASH,
		Z,
		X,
		C,
		V,
		B,
		N,
		M,
		COMMA,
		DOT,
		SLASH,
		RIGHT_SHIFT,
		KEYPAD,
		LEFT_ALT,
		SPACE_BAR,
		CAPS_LOCK,
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		NUM_LOCK,
		SCROLL_LOCK,
		KEYPAD_7,
		KEYPAD_8,
		KEYPAD_9,
		KEYPAD_MINUS,
		KEYPAD_4,
		KEYPAD_5,
		KEYPAD_6,
		KEYPAD_PLUS,
		KEYPAD_1,
		KEYPAD_2,
		KEYPAD_3,
		KEYPAD_0,
		DEL
};