#ifndef OSTEST_KEYBOARDKEY_H
#define OSTEST_KEYBOARDKEY_H

#include "KeyCode.h"

struct KeyboardState
{
	bool shiftActive;
	bool capsLockActive;
	bool numLockActive;
};

enum KeyboardCondition
{
	NO_CONDITION = 0,
	SHIFT = 1,
	CAPS_LOCK = 1 << 1,
	NUM_LOCK = 1 << 2
};

#define KEYBOARD_KEYS_COUNT 83

#define DECL_KEYBOARD_KEY(KEY) static KeyboardKey KEY;

class KeyboardKey
{
public:
	const KeyCode& getPrimaryKey() const;
	const KeyCode& getSecondaryKey() const;
	const KeyCode& applyCondition(KeyboardState state) const;

	static const KeyboardKey& fromScanCode(unsigned char scanCode);
private:
	explicit KeyboardKey(const KeyCode& key);
	KeyboardKey(const KeyCode& primary, const KeyCode& secondary, unsigned char conditionForSecondary);

	const KeyCode& _primary;
	const KeyCode& _secondary;
	unsigned char _conditionForSecondary;  // unsigned char because this condition can contain multiple conditions (with & operator)

	static KeyboardKey _keyboardLayout[KEYBOARD_KEYS_COUNT];
public:  // all keyboard keys
	DECL_KEYBOARD_KEY(ESCAPE)
	DECL_KEYBOARD_KEY(ONE)
	DECL_KEYBOARD_KEY(TWO)
	DECL_KEYBOARD_KEY(THREE)
	DECL_KEYBOARD_KEY(FOUR)
	DECL_KEYBOARD_KEY(FIVE)
	DECL_KEYBOARD_KEY(SIX)
	DECL_KEYBOARD_KEY(SEVEN)
	DECL_KEYBOARD_KEY(EIGHT)
	DECL_KEYBOARD_KEY(NINE)
	DECL_KEYBOARD_KEY(ZERO)
	DECL_KEYBOARD_KEY(MINUS)
	DECL_KEYBOARD_KEY(EQUAL_SIGN)
	DECL_KEYBOARD_KEY(BACKSPACE)
	DECL_KEYBOARD_KEY(TAB)
	DECL_KEYBOARD_KEY(Q)
	DECL_KEYBOARD_KEY(W)
	DECL_KEYBOARD_KEY(E)
	DECL_KEYBOARD_KEY(R)
	DECL_KEYBOARD_KEY(T)
	DECL_KEYBOARD_KEY(Y)
	DECL_KEYBOARD_KEY(U)
	DECL_KEYBOARD_KEY(I)
	DECL_KEYBOARD_KEY(O)
	DECL_KEYBOARD_KEY(P)
	DECL_KEYBOARD_KEY(OPEN_SQUARE_BRACKET)
	DECL_KEYBOARD_KEY(CLOSE_SQUARE_BRACKET)
	DECL_KEYBOARD_KEY(ENTER)
	DECL_KEYBOARD_KEY(LEFT_CONTROL)
	DECL_KEYBOARD_KEY(A)
	DECL_KEYBOARD_KEY(S)
	DECL_KEYBOARD_KEY(D)
	DECL_KEYBOARD_KEY(F)
	DECL_KEYBOARD_KEY(G)
	DECL_KEYBOARD_KEY(H)
	DECL_KEYBOARD_KEY(J)
	DECL_KEYBOARD_KEY(K)
	DECL_KEYBOARD_KEY(L)
	DECL_KEYBOARD_KEY(SEMICOLON)
	DECL_KEYBOARD_KEY(QUOTE)
	DECL_KEYBOARD_KEY(GRAVE_ACCENT)
	DECL_KEYBOARD_KEY(LEFT_SHIFT)
	DECL_KEYBOARD_KEY(BACKSLASH)
	DECL_KEYBOARD_KEY(Z)
	DECL_KEYBOARD_KEY(X)
	DECL_KEYBOARD_KEY(C)
	DECL_KEYBOARD_KEY(V)
	DECL_KEYBOARD_KEY(B)
	DECL_KEYBOARD_KEY(N)
	DECL_KEYBOARD_KEY(M)
	DECL_KEYBOARD_KEY(COMMA)
	DECL_KEYBOARD_KEY(DOT)
	DECL_KEYBOARD_KEY(SLASH)
	DECL_KEYBOARD_KEY(RIGHT_SHIFT)
	DECL_KEYBOARD_KEY(KEYPAD)
	DECL_KEYBOARD_KEY(LEFT_ALT)
	DECL_KEYBOARD_KEY(SPACE_BAR)
	DECL_KEYBOARD_KEY(CAPS_LOCK)
	DECL_KEYBOARD_KEY(F1)
	DECL_KEYBOARD_KEY(F2)
	DECL_KEYBOARD_KEY(F3)
	DECL_KEYBOARD_KEY(F4)
	DECL_KEYBOARD_KEY(F5)
	DECL_KEYBOARD_KEY(F6)
	DECL_KEYBOARD_KEY(F7)
	DECL_KEYBOARD_KEY(F8)
	DECL_KEYBOARD_KEY(F9)
	DECL_KEYBOARD_KEY(F10)
	DECL_KEYBOARD_KEY(NUM_LOCK)
	DECL_KEYBOARD_KEY(SCROLL_LOCK)
	DECL_KEYBOARD_KEY(KEYPAD_7)
	DECL_KEYBOARD_KEY(KEYPAD_8)
	DECL_KEYBOARD_KEY(KEYPAD_9)
	DECL_KEYBOARD_KEY(KEYPAD_MINUS)
	DECL_KEYBOARD_KEY(KEYPAD_4)
	DECL_KEYBOARD_KEY(KEYPAD_5)
	DECL_KEYBOARD_KEY(KEYPAD_6)
	DECL_KEYBOARD_KEY(KEYPAD_PLUS)
	DECL_KEYBOARD_KEY(KEYPAD_1)
	DECL_KEYBOARD_KEY(KEYPAD_2)
	DECL_KEYBOARD_KEY(KEYPAD_3)
	DECL_KEYBOARD_KEY(KEYPAD_0)
	DECL_KEYBOARD_KEY(DEL)
	DECL_KEYBOARD_KEY(NO_KEY)
};

#endif //OSTEST_KEYBOARDKEY_H
