#ifndef OSTEST_KEYCODE_H
#define OSTEST_KEYCODE_H

enum KeyCodeType
{
	NO_TYPE = 0,
	FUNCTION = 1, // such as F1, F2
	NAVIGATION = 1 << 1,  // arrow keys, page up
	ARROW = 1 << 2,
	MODIFIER = 1 << 3,
	LETTER = 1 << 4,
	DIGIT = 1 << 5,
	SYMBOL = 1 << 6,
	KEYPAD = 1 << 7,
	WHITESPACE = 1 << 8,  // enter, tab, space
};

#define DECL_KEYCODE(NAME) static const KeyCode NAME;

class KeyCode
{
public:
	KeyCode(unsigned int index, unsigned char ascii, const char* name, unsigned int keycodeType);

	unsigned int getIndex() const;

	unsigned char asASCII() const;
	bool isASCII() const;

	const char* getName() const;

	bool isKeyCodeType(KeyCodeType type) const;

	bool operator==(const KeyCode& rhs) const;
	bool operator!=(const KeyCode& rhs) const;
private:
	unsigned int _index;
	unsigned char _ascii;
	const char* _name;
	unsigned int _keycodeType;  // as a char because it can be multiple classes
public:
	DECL_KEYCODE(ESCAPE)
	DECL_KEYCODE(ONE)
	DECL_KEYCODE(EXCLAMATION_MARK)
	DECL_KEYCODE(TWO)
	DECL_KEYCODE(AT)
	DECL_KEYCODE(THREE)
	DECL_KEYCODE(HASHTAG)
	DECL_KEYCODE(FOUR)
	DECL_KEYCODE(DOLLAR_SIGN)
	DECL_KEYCODE(FIVE)
	DECL_KEYCODE(PERCENT_SIGN)
	DECL_KEYCODE(SIX)
	DECL_KEYCODE(CARET)
	DECL_KEYCODE(SEVEN)
	DECL_KEYCODE(AMPERSAND)
	DECL_KEYCODE(EIGHT)
	DECL_KEYCODE(ASTERISK)
	DECL_KEYCODE(NINE)
	DECL_KEYCODE(OPEN_BRACKET)
	DECL_KEYCODE(ZERO)
	DECL_KEYCODE(CLOSE_BRACKET)
	DECL_KEYCODE(MINUS)
	DECL_KEYCODE(UNDERSCORE)
	DECL_KEYCODE(EQUAL_SIGN)
	DECL_KEYCODE(PLUS)
	DECL_KEYCODE(BACKSPACE)
	DECL_KEYCODE(TAB)
	DECL_KEYCODE(Q)
	DECL_KEYCODE(q)
	DECL_KEYCODE(W)
	DECL_KEYCODE(w)
	DECL_KEYCODE(E)
	DECL_KEYCODE(e)
	DECL_KEYCODE(R)
	DECL_KEYCODE(r)
	DECL_KEYCODE(T)
	DECL_KEYCODE(t)
	DECL_KEYCODE(Y)
	DECL_KEYCODE(y)
	DECL_KEYCODE(U)
	DECL_KEYCODE(u)
	DECL_KEYCODE(I)
	DECL_KEYCODE(i)
	DECL_KEYCODE(O)
	DECL_KEYCODE(o)
	DECL_KEYCODE(P)
	DECL_KEYCODE(p)
	DECL_KEYCODE(OPEN_SQUARE_BRACKET)
	DECL_KEYCODE(OPEN_CURLEY_BRACKET)
	DECL_KEYCODE(CLOSE_SQUARE_BRACKET)
	DECL_KEYCODE(CLOSE_CURLEY_BRACKET)
	DECL_KEYCODE(ENTER)
	DECL_KEYCODE(LEFT_CONTROL)
	DECL_KEYCODE(A)
	DECL_KEYCODE(a)
	DECL_KEYCODE(S)
	DECL_KEYCODE(s)
	DECL_KEYCODE(D)
	DECL_KEYCODE(d)
	DECL_KEYCODE(F)
	DECL_KEYCODE(f)
	DECL_KEYCODE(G)
	DECL_KEYCODE(g)
	DECL_KEYCODE(H)
	DECL_KEYCODE(h)
	DECL_KEYCODE(J)
	DECL_KEYCODE(j)
	DECL_KEYCODE(K)
	DECL_KEYCODE(k)
	DECL_KEYCODE(L)
	DECL_KEYCODE(l)
	DECL_KEYCODE(SEMICOLON)
	DECL_KEYCODE(COLON)
	DECL_KEYCODE(QUOTE)
	DECL_KEYCODE(QUOTATION_MARKS)
	DECL_KEYCODE(GRAVE_ACCENT)
	DECL_KEYCODE(TILDE)
	DECL_KEYCODE(LEFT_SHIFT)
	DECL_KEYCODE(BACKSLASH)
	DECL_KEYCODE(VERTICAL_BAR)
	DECL_KEYCODE(Z)
	DECL_KEYCODE(z)
	DECL_KEYCODE(X)
	DECL_KEYCODE(x)
	DECL_KEYCODE(C)
	DECL_KEYCODE(c)
	DECL_KEYCODE(V)
	DECL_KEYCODE(v)
	DECL_KEYCODE(B)
	DECL_KEYCODE(b)
	DECL_KEYCODE(N)
	DECL_KEYCODE(n)
	DECL_KEYCODE(M)
	DECL_KEYCODE(m)
	DECL_KEYCODE(COMMA)
	DECL_KEYCODE(LESS_THAN)
	DECL_KEYCODE(DOT)
	DECL_KEYCODE(GREATER_THAN)
	DECL_KEYCODE(SLASH)
	DECL_KEYCODE(QUESTION_MARK)
	DECL_KEYCODE(RIGHT_SHIFT)
	DECL_KEYCODE(KEYPAD)
	DECL_KEYCODE(PRINT_SCREEN)
	DECL_KEYCODE(LEFT_ALT)
	DECL_KEYCODE(SPACE_BAR)
	DECL_KEYCODE(CAPS_LOCK)
	DECL_KEYCODE(F1)
	DECL_KEYCODE(F2)
	DECL_KEYCODE(F3)
	DECL_KEYCODE(F4)
	DECL_KEYCODE(F5)
	DECL_KEYCODE(F6)
	DECL_KEYCODE(F7)
	DECL_KEYCODE(F8)
	DECL_KEYCODE(F9)
	DECL_KEYCODE(F10)
	DECL_KEYCODE(NUM_LOCK)
	DECL_KEYCODE(SCROLL_LOCK)
	DECL_KEYCODE(KEYPAD_7)
	DECL_KEYCODE(HOME)
	DECL_KEYCODE(KEYPAD_8)
	DECL_KEYCODE(UP)
	DECL_KEYCODE(KEYPAD_9)
	DECL_KEYCODE(PAGE_UP)
	DECL_KEYCODE(KEYPAD_MINUS)
	DECL_KEYCODE(KEYPAD_4)
	DECL_KEYCODE(LEFT)
	DECL_KEYCODE(KEYPAD_5)
	DECL_KEYCODE(KEYPAD_6)
	DECL_KEYCODE(RIGHT)
	DECL_KEYCODE(KEYPAD_PLUS)
	DECL_KEYCODE(KEYPAD_1)
	DECL_KEYCODE(END)
	DECL_KEYCODE(KEYPAD_2)
	DECL_KEYCODE(DOWN)
	DECL_KEYCODE(KEYPAD_3)
	DECL_KEYCODE(PAGE_DOWN)
	DECL_KEYCODE(KEYPAD_0)
	DECL_KEYCODE(INSERT)
	DECL_KEYCODE(DEL)
	DECL_KEYCODE(NO_KEY)
};

#endif //OSTEST_KEYCODE_H
